package com.javaex.practice01;

public class Practice01ex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		System.out.println();
		System.out.println("< Practice 01 >");
		System.out.println("--------------------------------------------------");

		System.out.println("Ex01.java: " + "2)float");
		System.out.println();
		
		System.out.println("Ex02.java: " + "4) JDK에는 javac.exe가 포함되어있지 않다(x)");
		System.out.println();
		//JDK와 JRE의 차이점// 
		//JDK에는 Java 프로그램을 작성하는 데 필요한 도구(그래서 Kit라고 부름)와
		//이를 실행하는 데 필요한 JRE가 포함되어 있습니다.
		
		//Java SE 구현체는 JDK와 JRE가 있는데 
		//JDK는 프로그램 개발에 필요한 JVM, 라이브러리 API, 컴파일러 등 개발 도구가 포함되어 있고 
		//JRE는 프로그램 실행에 필요한 JVM, 라이브러리 API만 포함되어 있다. 
		
		//자바 프로그램을 컴파일하기 위해선 JDK가 필요하고 
		//바이트코드로 실행만 하려면 JRE만 있으면 되겠다. 
		
		//JDK는 오라클에서 무료로 다운로드 받을 수 있다. 
		//JDK를 설치하면 bin 디렉토리에 컴파일러 (javac.exe)와 JVM 구동 명령어 (java.exe)가 포함되어 있다.
		
		System.out.println("Ex03.java: " + "(3) 운영체제별로 동일한 JVM이 사용된다(x) -> 다른(ㅇ)");
		System.out.println();
		
		System.out.println("Ex04.java: java 프로그램 개발과정을 순서대로 나열해 보세요. \n" 
									+ "(3) 자바 소스파일(~.java)을 작성한다 \n"
									+ "(1) Javac.exe로 바이트코드(~.class)을 생성한다 \n" 
									+ "(2) Java.exe로 JVM을 실행시킨다. \n"
									+ "(4) JVM은 main() 메소드를 찾아 실행시킨다.");
										System.out.println();
		// 소스코드를 작성한다.
		// (.java 확장자의 소스파일) 컴파일러 (javac.exe)가 바이트코드로 변한다.
		// (.class 확장자의 클래스 파일) 런처 (java.exe)로 자바 가상 머신을 구동시킨다.
		// 자바 가상 머신이 바이트코드를 해석하여 자바 프로그램이 실행된다.
		// (//Java.exe가 실행되면 JVM이 바이트코드 파일을 메모리로 로드, 기계어로 번역, 메인메소드찾아실행 )

		// 자바 가상 머신만 설치되어 있다면 바이트코드는 어떤 운영체제에서라도 실행될 수 있다

		// 바이트코드는 자바 가상 머신(JVM)이 실행할 수 있는 플랫폼 독립적인 코드 형식입니다.
		// 반면에 JVM은 특정 운영체제(OS)에 맞게 설계되어 있어서 OS에 종속적입니다.
		// 윈도우/맥/리눅스 별 다른 JVM이 사용된다.
		// 이것은 자바가 '한 번 작성하면 어디서나 실행된다(Write Once, Run Anywhere)'는 이념을 실현하기 위한 것입니다.

		// 자바 가상 머신 (JVM)은 자바 바이트코드 (.class 파일)를
		// 운영체제가 이해할 수 있는 기계어로 변환하여 실행시키는 역할을 합니다.	
		
		
		System.out.println("Ex05.java: "
									+ "(1) 패키지명은 일반적으로 가독성을 위해 대문자, 소문자 섞어 사용한다.(클래스명) \n"
									+ "(2) 클래스명은 소문자로만 구성하여 작성한다.(패키지명) \n"
									+ "(3) 자바 소스파일(~.java)명과 클래스 이름은 대소문자까지 모두 동일한 단어를 사용해야 한다.(ㅇ) \n"
									+ "(4) 실행문 뒤(문자의 끝)에는 반드시 ( : )콜론을 사용해야 한다.(semicolon ;사용해야함) \n"
									+ "(5) 처음으로 실행되는 함수의 이름은 개발자가 임의로 작성해서 만든다 (main함수부터 실행된다)");
										System.out.println();
		//자바 프로그램에서 처음으로 실행되는 함수의 이름은 정해져 있다
		// 그 함수의 이름은 main이고 자바 프로그램은 main 함수부터 실행되며, 
		//그 안에 있는 코드들이 순차적으로 실행된다 
		
		/* public class Main {
	    		public static void main(String[] args) {
	        		// 이 곳에 프로그램 시작점의 코드를 작성
	    		}
			}
			
		*///위의 코드 해석:
		//main 함수는 public 접근 제어자를 가지고 있고, static 이며, 리턴 타입은 void 이다
		//또한 파라미터로 String 배열(String[] args)을 받을 수 있다. 
		//이 배열은 프로그램이 실행될 때 커맨드 라인에서 전달되는 인수들을 저장한다.
		
		
		System.out.println("Ex06.java: 틀린 것을 찾아서 수정해 보세요. \n"
				+ "(1) 변수한개에는 동시에 여러 개의 값을 담을 수 있다.(하나의 값만 담을수 있다) \n"
				+ "(2) 변수는 선언시에 사용한 타입의 값만 저장할 수 있다. (ㅇ) \n"
				+ "(3) 변수는 초기값이 저장되지 않아도 읽을 수 있다.(변수선언시 초기값저장 필수 초기화필수) \n"
				+ "(4) 모든 자료형의 변수는 동일한 방식으로 저장된다(변수의 저장방식은 사용하는 자료형에 따라 다르다) \n"
				+ " ");

		//변수는 보통 하나의 값을 저장하는 메모리 공간이라서 변수 한 개에 동시에 여러 개의 값을 담을 수는 없다.. 
		//예를 들어, 배열이나 리스트와 같은 데이터 구조를 사용하여 여러 값을 그룹화할 수 있음. 
		//또는 객체 지향 프로그래밍에서는 클래스를 사용하여 여러 값과 해당 값에 대한 동작을 함께 묶을 수 있음. 
		//이러한 위의 방법들을 통해 변수 한 개에 여러 값을 관리가능.
		
		//변수가 선언될 때 사용한 타입의 값만을 저장하는 것은 정적 타입 언어에서 일반적인 규칙
		//변수를 선언할 때 타입을 명시해야 하며, 해당 변수는 선언된 타입과 호환되는 값만을 저장할 수 있음
		//예를 들어, 파이썬과 같은 동적 타입 언어에서는 한변수에 정수나 문자열과 같이 다양한 타입의 값을 저장할 수 있다
	
		//변수는 초기값이 저장되지 않으면 읽을 수 없음. 항상 변수 선언시 초기화필요 잊지말자
		//변수를 선언할 때 초기값을 할당하지 않으면 해당 변수는 컴퓨터 메모리의 일부를 차지하지만 그 안에는 유효한 값이 없음. 
		//초기화 없이 사용하려고 하면 컴파일러나 인터프리터가 오류를 발생시킴, 주로 예를들어 0,null 등을 사용함
		
		
	}
}
