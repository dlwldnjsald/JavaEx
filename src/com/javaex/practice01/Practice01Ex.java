package com.javaex.practice01;

public class Practice01Ex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		System.out.println();
		System.out.println("< Practice 01 >");
		System.out.println("==================================================================");

		System.out.println("\n" + "Ex01.java: 기본 자료형 중 정수형 자료형이 아닌 것은? \n" + "2)float");
		System.out.println();
		
		System.out.println("Ex02.java: JDK와 JRE의 차이점을 설명한 것 중 틀린 것을 찾아 수정해보세요. \n"
							+ "4) JDK에는 javac.exe가 포함되어있지 않다(x)" + "\n");
		
		//JDK와 JRE의 차이점// 
		//JDK에는 Java 프로그램을 작성하는 데 필요한 도구(그래서 Kit라고 부름)와
		//이를 실행하는 데 필요한 JRE가 포함되어 있음
		
		//Java SE 구현체는 JDK와 JRE가 있는데 
		//JDK는 프로그램 개발에 필요한 JVM, 라이브러리 API, 컴파일러 등 개발 도구가 포함되어 있고 
		//JRE는 프로그램 실행에 필요한 JVM, 라이브러리 API만 포함되어 있다. 
		
		//자바 프로그램을 컴파일하기 위해선 JDK가 필요하고 
		//바이트코드로 실행만 하려면 JRE만 있으면 됨. 
		
		//JDK는 오라클에서 무료로 다운로드 받을 수 있음. 
		//JDK를 설치하면 bin 디렉토리에 컴파일러 (javac.exe)와 JVM 구동 명령어 (java.exe)가 포함되어 있음.
		
		System.out.println("Ex03.java: JVM에 대한 설명으로 틀린 것을 찾아 수정해보세요. \n" 
							+ "(3) 운영체제별로 동일한 JVM이 사용된다(x) -> 다른(ㅇ)");
								System.out.println();
		
		System.out.println("Ex04.java: java 프로그램 개발과정을 순서대로 나열해 보세요. \n" 
									+ "(3) 자바 소스파일(~.java)을 작성한다 \n"
									+ "(1) Javac.exe로 바이트코드(~.class)을 생성한다 \n" 
									+ "(2) Java.exe로 JVM을 실행시킨다. \n"
									+ "(4) JVM은 main() 메소드를 찾아 실행시킨다." + "\n");
									
		// 소스코드를 작성
		// (.java 확장자의 소스파일) 컴파일러 (javac.exe)가 바이트코드로 변함
		// (.class 확장자의 클래스 파일) 런처 (java.exe)로 자바 가상 머신을 구동시킴
		// 자바 가상 머신이 바이트코드를 해석하여 자바 프로그램이 실행됨
		// (//Java.exe가 실행되면 JVM이 바이트코드 파일을 메모리로 로드, 기계어로 번역, 메인메소드찾아실행 )

		// 자바 가상 머신만 설치되어 있다면 바이트코드는 어떤 운영체제에서라도 실행될 수 있음

		// 바이트코드는 자바 가상 머신(JVM)이 실행할 수 있는 플랫폼 독립적인 코드 형식
		// 반면에 JVM은 특정 운영체제(OS)에 맞게 설계되어 있어서 OS에 종속적_ 윈도우/맥/리눅스 별 다른 JVM이 사용됨
		// 이것은 자바가 '한 번 작성하면 어디서나 실행된다(Write Once, Run Anywhere)'는 이념을 실현하기 위한 것

		// 자바 가상 머신 (JVM)은 자바 바이트코드 (.class 파일)를
		// 운영체제가 이해할 수 있는 기계어로 변환하여 실행시키는 역할을 함
		
		
		System.out.println("Ex05.java: 자바 소스파일(~. java)을 작성할 때 틀린 것을 찾아 수정해보세요. \n"
									+ "(1) 패키지명은 일반적으로 가독성을 위해 대문자, 소문자 섞어 사용한다.(클래스명) \n"
									+ "(2) 클래스명은 소문자로만 구성하여 작성한다.(패키지명) \n"
									+ "(3) 자바 소스파일(~.java)명과 클래스 이름은 대소문자까지 모두 동일한 단어를 사용해야 한다.(ㅇ) \n"
									+ "(4) 실행문 뒤(문자의 끝)에는 반드시 ( : )콜론을 사용해야 한다.(semicolon ;사용해야함) \n"
									+ "(5) 처음으로 실행되는 함수의 이름은 개발자가 임의로 작성해서 만든다 (main함수부터 실행된다)");
										System.out.println();
		
		//5 자바 프로그램에서 처음으로 실행되는 함수의 이름은 정해져 있음
		//그 함수의 이름은 main 이고 자바 프로그램은 main 함수부터 실행되며, 그 안에 있는 코드들이 순차적으로 실행됨
		
		/* public class Main {
	    		public static void main(String[] args) {
	        		// 이 곳에 프로그램 시작점의 코드를 작성
	    		}
			}
			
		*///위의 코드 해석:
		//main 함수는 public 접근 제어자를 가지고 있고, static, 리턴 타입은 void 
		//또한 파라미터로 String 배열(String[] args)을 받을 수 있음 
		//이 배열은 프로그램이 실행될 때 커맨드 라인에서 전달되는 인수들을 저장함
		
		
		System.out.println("Ex06.java: 틀린 것을 찾아서 수정해 보세요.(1,3,4,7 번 틀림) \n"
				+ "(1) 변수한개에는 동시에 여러 개의 값을 담을 수 있다.(하나의 값만 담을수 있다) \n"
				+ "(2) 변수는 선언시에 사용한 타입의 값만 저장할 수 있다. (ㅇ) \n"
				+ "(3) 변수는 초기값이 저장되지 않아도 읽을 수 있다.(변수선언시 초기값저장 필수 초기화필수) \n"
				+ "(4) 모든 자료형의 변수는 동일한 방식으로 저장된다 \n" +
					"    (변수의 저장방식은 사용하는 자료형에 따라 다양한 방식으로 저장되며, 언어의 타입 시스템과 메모리 관리 방식에 따라 다르다) \n"
				+ "(5) double형은 float보다 큰 수를 담을 수 있다.(ㅇ) \n" 
				+ "(6) int, float, char, String은 모두 기본자료형에 속한다(ㅇ) \n"
				+ "(7) final로 선언된 변수는 수정이 가능하다 (final은 한번 선언과 초기화후엔 수정 불가) \n"
				+ "(8) long형에는 항상 ‘L’을 붙여서 대입해야 한다.(ㅇ) \n"
				+ "(9) float형에는 항상 ‘F’을 붙여서 대입해야 한다.(ㅇ) \n");

		//1 변수는 보통 하나의 값을 저장하는 메모리 공간이라서 변수 한 개에 동시에 여러 개의 값을 담을 수는 없음.. 
		//예를 들어, 배열이나 리스트와 같은 데이터 구조를 사용하여 여러 값을 그룹화할 수 있음. 
		//또는 객체 지향 프로그래밍에서는 클래스를 사용하여 여러 값과 해당 값에 대한 동작을 함께 묶을 수 있음. 
		//이러한 위의 방법들을 통해 변수 한 개에 여러 값을 관리가능.
		
		//2 변수가 선언될 때 사용한 타입의 값만을 저장하는 것은 정적 타입 언어에서 일반적인 규칙
		//변수를 선언할 때 타입을 명시해야 하며, 해당 변수는 선언된 타입과 호환되는 값만을 저장할 수 있음
		//예를 들어, 파이썬과 같은 동적 타입 언어에서는 한변수에 정수나 문자열과 같이 다양한 타입의 값을 저장할 수 있음
	
		//3 변수는 초기값이 저장되지 않으면 읽을 수 없음. 항상 변수 선언시 초기화필요 잊지말자
		//변수를 선언할 때 초기값을 할당하지 않으면 해당 변수는 컴퓨터 메모리의 일부를 차지하지만 그 안에는 유효한 값이 없음. 
		//초기화 없이 사용하려고 하면 컴파일러나 인터프리터가 오류를 발생시킴, 주로 예를들어 0,null 등을 사용함
		
		//4 기본 자료형(Primitive types): 대부분의 언어에서 정수, 부동 소수점 숫자, 문자, 불리언 등과 같은 기본 자료형은 변수에 직접 값을 저장
		//( 보통 고정된 크기의 메모리 공간에 저장됨)
		//참조 자료형(Reference types): 객체, 배열, 문자열 등과 같은 참조 자료형은 변수에 해당 값의 메모리 위치(주소)를 저장
		//(실제 데이터가 저장된 곳을 가리키는 포인터와 같은 역할)-> 실제 데이터는 힙메모리에 저장됨
		
		//5 자바에서 float는 32비트 double은 64비트/ double은 float보다 더 넓은 범위의 값을 표현할 수 있음
		
		//6 자바에선 스트링도 기본자료형(프리미티브타입)에 속한다고 보면 됨_다른언어에선 모르겠음
		
		//7 final로 선언된 변수는 수정할 수 없음 ->변수,메서드또는 클래스에 사용되는데 한번 초기화된 이후에는 재할당 불가함
		//final 키워드는 변수의 값이 변하지 않아야 하는 상수(constant)를 선언할 때 사용됨-> 코드의 가독성과 유지보수성을 높이는 데 도움됨.
		
		//8 'L'을 붙여주어서 명시적으로 long 형임을 나타내야함 ㅇ
		
		//9 자바에서는 기본적으로 실수 리터럴이 기본적으로 double로 취급
		//항상 대입할 필요는 없지만 float 타입의 값을 선언하려면 리터럴 뒤에 'F'를 붙여야함 /'F'를 붙이지 않고도 float로 자동 형변환가능 하지만경고줌
		
		
		System.out.println("--------------------------Ex07.코드 수정후 오류 제거하기---------------------");
		//문제의 코드	
		String a = "int true/ 리턴타입은 boolean이 맞다";
		String b = "int #_of_workers/ 리턴타입은 String이 맞다";
		String c = "int countOfLettersInString/ 리턴타입은 String이 맞다";
		String d = "int 1stLevel1/ 숫자와 알파벳의 조합이섞인 변수의 리턴타입 int선언은 불가하다.";
		String e = "int person#/ String person#;로 가능함";
		String f = "int_person/ 정수형불가 문자열로 선언String";
		
		System.out.println( a +"\n" + b +"\n"+ c +"\n"+ d +"\n"+ e +"\n"+ f + "\n");
		
		
		
		
		System.out.println("--------------------------Ex08.코드 수정후 오류 제거하기---------------------");
		//문제의 코드
		System.out.println("public class hello { //-> 이부분에서 클래스명은 파일명(.java)과 동일하게 설정해야" + "\n");
		
		
		
		
		
		System.out.println("-----------------------------------------------------------------------");
		System.out.println("\n"+ "Ex09.java:" + "\n" +"short/2byte/정수형 " + "\n" + "double/8byte/실수형" + "\n" + 
							"float/4byte/실수형" + "\n" + "byte/1byte/정수형"+ "\n" + "char/2byte/문자형" + "\n"
							+ "Boolean/1byte/논리형" + "\n" + "long/8byte/정수형"+ "\n");
							
		//정수형: byte-short-int-long순으로 1-2-4-8byte
		//실수형: float-double순으로 4-8byte
		//문자형: char 2byte 문자 '하나' 저장/작은 따옴표('')로 주의-> 자바에서는 큰따옴표""가 String 이라는 객체를 만들기 때문에 주의
		//논리형: boolean 1byte (t/f)


		
		
		System.out.println("Ex10.java: 형 변환(type casting) 우선순위를 그린 표이다. 아래의 빈칸을 채우세요" + "\n"
							+ "1)byte" +"\n" + "2)short" + "\n" + "3)2byte" +"\n" + "4)4byte"+ "\n" 
							+ "5)long" +"\n" + "6)float" + "\n" + "7)double" + "\n" );
		
		
		
		
		
		System.out.println("--------------------------Ex11.코드 수정후 오류 제거하기---------------------");
							
		int iVar = 10;
		long lVar = 1000000000000L; //Long도 위에 L
		
		String A = "char cVar = 'ab'; //char는 문자 '하나' 저장가능";	 
//		char cVar = 'a';
		
		double dVar = 10;	
		
		String B = "float fVar = 12.4; //float형은 뒤에 F 써줘야함";
//		float fVar = 12.4F;	
		
		String C = "String str = 'ab'; //큰따옴표가 String 이라는 객체를 만들어서 변경필요";
//		String str = "ab";
		
		System.out.println(iVar + "\n" + lVar + "\n" + A + "\n" + dVar + "\n" + B + "\n" + C+ "\n");
		System.out.println("-----------------------------------------------------------------------");

		
		
		
		System.out.println("\n"+ "Ex12.java: " +
		"int x = 0;" + "\n" +
		"int y = 0;" + "\n" +
		"char grade = 'A';" +"\n" +
		"int salary = 2_000_000;" + "\n" +
		"int n = 1000; int로 바꿈" + "\n");
		
		
		
		
		System.out.println("Ex13.java:" + "다음 중 결과값이 다른 것을 선택하고 이유를 설명해 보세요" + "\n" +
							"A: (1)번 실수형 선언을 안해줘서 소숫점자리 다 잘리고 값이 2로 나움" + "\n");
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
